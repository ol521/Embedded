#include <Arduino.h>
#include <U8g2lib.h>
#include <bitset>
#include <STM32FreeRTOS.h>

//Constants
  const uint32_t interval = 100; //Display update interval
  static uint32_t phaseAcc = 0;
  volatile uint32_t currentStepSize;

struct {
std::bitset<32> inputs = 0;
int knob_rotate = 4;
const char* note = "UNKNOWN";
SemaphoreHandle_t mutex;  
} sysState;

//Pin definitions
  //Row select and enable
  const int RA0_PIN = D3;
  const int RA1_PIN = D6;
  const int RA2_PIN = D12;
  const int REN_PIN = A5;

  //Matrix input and output
  const int C0_PIN = A2;
  const int C1_PIN = D9;
  const int C2_PIN = A6;
  const int C3_PIN = D1;
  const int OUT_PIN = D11;

  //Audio analogue out
  const int OUTL_PIN = A4;
  const int OUTR_PIN = A3;

  //Joystick analogue in
  const int JOYY_PIN = A0;
  const int JOYX_PIN = A1;

  //Output multiplexer bits
  const int DEN_BIT = 3;
  const int DRST_BIT = 4;
  const int HKOW_BIT = 5;
  const int HKOE_BIT = 6;

//Display driver object
U8G2_SSD1305_128X32_NONAME_F_HW_I2C u8g2(U8G2_R0);

//Function to set outputs using key matrix
void setOutMuxBit(const uint8_t bitIdx, const bool value) {
      digitalWrite(REN_PIN,LOW);
      digitalWrite(RA0_PIN, bitIdx & 0x01);
      digitalWrite(RA1_PIN, bitIdx & 0x02);
      digitalWrite(RA2_PIN, bitIdx & 0x04);
      digitalWrite(OUT_PIN,value);
      digitalWrite(REN_PIN,HIGH);
      delayMicroseconds(2);
      digitalWrite(REN_PIN,LOW);
}

void sampleISR() {
  phaseAcc += currentStepSize;
  int32_t Vout = (phaseAcc >> 24) - 128;
  Vout = Vout >> (8 - sysState.knob_rotate);
  analogWrite(OUTR_PIN, Vout + 128);
}

void tone(void * pvParameters){
  const TickType_t xFrequency = 100/portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();

  while(1){
    std::bitset<32> inputs;
    int localStepSize = 0;
    const uint32_t stepSizes [13] = {50953930 ,54077543 ,57201155 ,60715220 ,64229284 ,68133799 ,72038315 ,76528508 ,81018701 ,85899346 ,90975216,96246313,0};
    xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    inputs = sysState.inputs;
    xSemaphoreGive(sysState.mutex);

    for(int i = 0; i<12; i++){
      if(inputs[i] == 0) localStepSize += stepSizes[i];
    }

    __atomic_store_n(&currentStepSize, localStepSize, __ATOMIC_RELAXED);

  }
}

struct knob{
  int upper_limit;
  int lower_limit;
  int a;
  int b;
  int knob_momentum = 0;
  int knob_rotate_local = 4;
  std::bitset<2> knob_preState;
  std::bitset<2> knob_curState;

 void getdata(){
  xSemaphoreTake(sysState.mutex, portMAX_DELAY);
  knob_preState[0] = sysState.inputs[a];
  knob_preState[1] = sysState.inputs[b];
  int knob_rotate_local = sysState.knob_rotate;
  xSemaphoreGive(sysState.mutex);
 }

  knob(int lower,int upper,int i,int j){
    upper_limit = upper;
    lower_limit = lower;
    a = i;
    b = j;
  }
  

  void direction(bool a, bool b){
    knob_curState[0] = a;
    knob_curState[1] = b;
    if(knob_curState != knob_preState){
      if((knob_preState == std::bitset<2>("00") && knob_curState == std::bitset<2>("01")) || (knob_preState == std::bitset<2>("11") && knob_curState == std::bitset<2>("10"))){
        knob_rotate_local++;
        knob_momentum = 1;
      }else if((knob_preState == std::bitset<2>("01") && knob_curState == std::bitset<2>("00")) || (knob_preState == std::bitset<2>("10") && knob_curState == std::bitset<2>("11"))){
        knob_rotate_local--;
        knob_momentum = -1;
      }else{
        if(knob_momentum == 1){
          knob_rotate_local++;
        }else if(knob_momentum == -1){
          knob_rotate_local--;
        }

      }
    }else{
      knob_momentum = 0;
    }

    knob_preState = knob_curState;
  }

  void limit(){
    if(knob_rotate_local > upper_limit){
      knob_rotate_local = upper_limit;
    }else if(knob_rotate_local < lower_limit){
       knob_rotate_local = lower_limit;
    }
  }



  void update(){
    xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    sysState.knob_rotate = knob_rotate_local;
    xSemaphoreGive(sysState.mutex);
  }


};


knob knob3(0,8,12,13);
void scanKeysTask(void * pvParameters) {
  const TickType_t xFrequency = 20/portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();

  

  while (1) {  
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
    int counter = 0;
    std::bitset<32> inputs = 0;

    int index = 12;
    const char* note = "Unknown";
    std::bitset<4>results;




    for(int i = 0; i<4;i++){
      digitalWrite(REN_PIN, LOW);
      digitalWrite(RA0_PIN, std::bitset<3>(i)[0]);
      digitalWrite(RA1_PIN, std::bitset<3>(i)[1]);
      digitalWrite(RA2_PIN, std::bitset<3>(i)[2]);
      digitalWrite(REN_PIN,HIGH);

      delayMicroseconds(3);

      results[0] = digitalRead(C0_PIN);
      results[1] = digitalRead(C1_PIN);
      results[2] = digitalRead(C2_PIN);
      results[3] = digitalRead(C3_PIN);
      for(int j = 0; j<4;j++){
        inputs[counter+j] = results[j];
      }

      switch (i) {
          case 0:
              if (!results[0]) {
                  note = "C";
              }
              if (!results[1]) {
                  note = "C#";
              }
              if (!results[2]) {
                  note = "D";
              }
              if (!results[3]) {
                  note = "D#";
              }
              break;

          case 1:
              if (!results[0]) {
                  note = "E";
              }
              if (!results[1]) {
                  note = "F";
              }
              if (!results[2]) {
                  note = "F#";
              }
              if (!results[3]) {
                  note = "G";
              }
              break;

          case 2:
              if (!results[0]) {
                  note = "G#";
              }
              if (!results[1]) {
                  note = "A";
              }
              if (!results[2]) {
                  note = "A#";
              }
              if (!results[3]) {
                  note = "B";
              }
              break;
      }
      counter += 4;
    }
    
    knob3.getdata();
    knob3.direction(inputs[12],inputs[13]);
    knob3.limit();
    knob3.update();


    xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    sysState.inputs = inputs;
    xSemaphoreGive(sysState.mutex);
    xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    sysState.note = note;
    xSemaphoreGive(sysState.mutex);

  }
}

void displayUpdateTask(void * pvParameters){
  const TickType_t xFrequency = 100/portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();
  while(1){
    //Update display
    u8g2.clearBuffer();         // clear the internal memory
    u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font
    u8g2.drawStr(2,10,"Hello World!");  // write something to the internal memory

    
    u8g2.setCursor(2,20);
    xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    u8g2.print(sysState.inputs.to_ulong(),HEX);
    xSemaphoreGive(sysState.mutex);
    xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    u8g2.print(sysState.knob_rotate);
    xSemaphoreGive(sysState.mutex);
    u8g2.setCursor(2,30); 
    u8g2.print(sysState.note);
    u8g2.sendBuffer();          // transfer internal memory to the display

    //Toggle LED
    digitalToggle(LED_BUILTIN);
  }
}

void setup() {
  // put your setup code here, to run once:

  //Set pin directions
  pinMode(RA0_PIN, OUTPUT);
  pinMode(RA1_PIN, OUTPUT);
  pinMode(RA2_PIN, OUTPUT);
  pinMode(REN_PIN, OUTPUT);
  pinMode(OUT_PIN, OUTPUT);
  pinMode(OUTL_PIN, OUTPUT);
  pinMode(OUTR_PIN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode(C0_PIN, INPUT);
  pinMode(C1_PIN, INPUT);
  pinMode(C2_PIN, INPUT);
  pinMode(C3_PIN, INPUT);
  pinMode(JOYX_PIN, INPUT);
  pinMode(JOYY_PIN, INPUT);

  //Initialise display
  setOutMuxBit(DRST_BIT, LOW);  //Assert display logic reset
  delayMicroseconds(2);
  setOutMuxBit(DRST_BIT, HIGH);  //Release display logic reset
  u8g2.begin();
  setOutMuxBit(DEN_BIT, HIGH);  //Enable display power supply

  //Initialise UART
  Serial.begin(9600);
  Serial.println("Hello World");

  TIM_TypeDef *Instance = TIM1;
  HardwareTimer *sampleTimer = new HardwareTimer(Instance);

  sampleTimer->setOverflow(22000, HERTZ_FORMAT);
  sampleTimer->attachInterrupt(sampleISR);
  sampleTimer->resume();

  sysState.mutex = xSemaphoreCreateMutex();

  TaskHandle_t scanKeysHandle = NULL;
  xTaskCreate(
  scanKeysTask,		/* Function that implements the task */
  "scanKeys",		/* Text name for the task */
  64,      		/* Stack size in words, not bytes */
  NULL,			/* Parameter passed into the task */
  2,			/* Task priority */
  &scanKeysHandle );	/* Pointer to store the task handle */

  TaskHandle_t displayUpdateHandle = NULL;
  xTaskCreate(
  displayUpdateTask,
  "displayUpdate",
  256,
  NULL,
  1,
  &displayUpdateHandle
  );

  TaskHandle_t toneHandle = NULL;
  xTaskCreate(
  tone,
  "tone",
  64,
  NULL,
  1,
  &toneHandle
  );


  vTaskStartScheduler();
}



void loop() {
  
}
