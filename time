#include <Arduino.h>
#include <U8g2lib.h>
#include <bitset>
#include <STM32FreeRTOS.h>
#include <atomic>
#include <cstdint>
#include <ES_CAN.h>
 
// Constants
const uint32_t interval = 100; // Display update interval
volatile int32_t currentStepSize;
// int noteIndex = -1;
const char *noteNames[12] = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};
uint8_t RX_Message[8];
uint8_t TX_Message[8];
std::string key1[24] = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
int filter_value;
uint8_t WAVETYPE = 2;
uint8_t PREVWAVETYPE = 0;
#define TABLE_SIZE 8192
int32_t sineTable[TABLE_SIZE];
 
int32_t reverbVout[660] = {0}; // 660 samples correspond to 30ms reverb at 22kHz
int32_t currentReverbVoutIndex = 0;
 
QueueHandle_t msgInQ;
QueueHandle_t msgOutQ;
SemaphoreHandle_t CAN_TX_Semaphore;
 
// Pin definitions
// Row select and enable
const int RA0_PIN = D3;
const int RA1_PIN = D6;
const int RA2_PIN = D12;
const int REN_PIN = A5;
 
// Matrix input and output
const int C0_PIN = A2;
const int C1_PIN = D9;
const int C2_PIN = A6;
const int C3_PIN = D1;
const int OUT_PIN = D11;
 
// Audio analogue out
const int OUTL_PIN = A4;
const int OUTR_PIN = A3;
 
// Joystick analogue in
const int JOYY_PIN = A0;
const int JOYX_PIN = A1;
 
// Output multiplexer bits
const int DEN_BIT = 3;
const int DRST_BIT = 4;
const int HKOW_BIT = 5;
const int HKOE_BIT = 6;
 
// Display driver object
U8G2_SSD1305_128X32_NONAME_F_HW_I2C u8g2(U8G2_R0);
 
// Function to set outputs using key matrix
void setOutMuxBit(const uint8_t bitIdx, const bool value)
{
  digitalWrite(REN_PIN, LOW);
  digitalWrite(RA0_PIN, bitIdx & 0x01);
  digitalWrite(RA1_PIN, bitIdx & 0x02);
  digitalWrite(RA2_PIN, bitIdx & 0x04);
  digitalWrite(OUT_PIN, value);
  digitalWrite(REN_PIN, HIGH);
  delayMicroseconds(2);
  digitalWrite(REN_PIN, LOW);
}
 
std::bitset<4> readCols()
{
  std::bitset<4> result;
  result[0] = digitalRead(C0_PIN);
  result[1] = digitalRead(C1_PIN);
  result[2] = digitalRead(C2_PIN);
  result[3] = digitalRead(C3_PIN);
  return result;
}
 
void setRow(uint8_t rowIdx)
{
  digitalWrite(REN_PIN, LOW);
  digitalWrite(RA0_PIN, (rowIdx & 0x01) ? HIGH : LOW);
  digitalWrite(RA1_PIN, (rowIdx & 0x02) ? HIGH : LOW);
  digitalWrite(RA2_PIN, (rowIdx & 0x04) ? HIGH : LOW);
  digitalWrite(REN_PIN, HIGH);
}
 
constexpr uint32_t stepSizes[12] = {
    50960237, // Note 1
    53990491, // Note 2
    57200933, // Note 3
    60602277, // Note 4
    64205876, // Note 5
    68023756, // Note 6
    72068659, // Note 7
    76354085, // Note 8
    80894335, // Note 9 (Note A, 440Hz)
    85704562, // Note 10
    90800821, // Note 11
    96200119  // Note 12
};
 
void initSineTable()
{
  for (int i = 0; i < TABLE_SIZE; ++i)
  {
    sineTable[i] = (int32_t)(sinf((float)i / TABLE_SIZE * 2 * 3.1415) * 128);
  }
}
 
class Filter
{
private:
  float x[11];
  float y0;
  float alpha;
  float a0;
  float a1;
 
public:
  int32_t lowpass(int32_t x0)
  {
    alpha = 10;
    alpha = alpha / 10;
 
    a0 = alpha;
    a1 = 0.1 * (1 - alpha);
    y0 = a0 * (float)x0;
 
    y0 += a1 * x[0] + a1 * x[1] + a1 * x[2] + a1 * x[3] + a1 * x[4] + a1 * x[5] + a1 * x[6] + a1 * x[7] + a1 * x[8] + a1 * x[9] + a1 * x[10];
    x[10] = x[9];
    x[9] = x[8];
    x[8] = x[7];
    x[7] = x[6];
    x[6] = x[5];
    x[5] = x[4];
    x[4] = x[3];
    x[3] = x[2];
    x[2] = x[1];
    x[1] = x[0];
    x[0] = (float)x0;
 
    return (int32_t)y0;
  }
};
 
Filter lowpassFilter;
class Knob
{
public:
  int rotation;
  void update(uint8_t currentAB)
  {
 
    uint8_t transition = (lastAB << 2) | currentAB;
    switch (transition)
    {
    // Clockwise transitions
    case 0b0001:
    case 0b1110:
      direction = 1;
      rotation++;
 
      break;
    // Counter-clockwise transitions
    case 0b0100:
    case 0b1011:
      direction = -1;
      rotation--;
      break;
 
    // Impossible transitions - assume same direction as last valid transition
    case 0b0011:
    case 0b0110:
    case 0b1001:
    case 0b1100:
      rotation += lastDirection;
      break;
    }
 
    lastDirection = direction;
    lastAB = currentAB;
  }
 
  int getRotation()
  {
    if (rotation > 8)
    {
      rotation = 8;
    }
    if (rotation < 0)
    {
      rotation = 0;
    }
    return rotation;
  }
 
private:
  int lastDirection;
  int8_t direction;
  uint8_t lastAB = 0; // Last state of A and B combined
};
 
struct
{
  std::bitset<32> inputs;
  SemaphoreHandle_t mutex;
  Knob knob1;
  Knob knob2;
  Knob knob3;
  int role = 1;
  int pos;
} sysState;
 
struct polyphony
{
  uint32_t phaseAcc;
  volatile uint32_t localcurrentStepSize;
} tone1[12], tone2[12];
 
int32_t changeWaveform(uint32_t accumulatedPhase)
{
  int32_t Vout = 0;
  if (sysState.pos == 1)
  {
    WAVETYPE = sysState.knob1.getRotation();
  }
 
  if (WAVETYPE > 2)
  {
    WAVETYPE = 2;
  }
  if (WAVETYPE < 0)
  {
    WAVETYPE = 0;
  }
 
  // Serial.println(WAVETYPE);
  if (WAVETYPE == 0)
  {
    // Sawtooth
    Vout = (accumulatedPhase >> 24) - 128;
  }
  else if (WAVETYPE == 1)
  {
    // Square Wave
    if (accumulatedPhase > (4294967296 / 2))
    {
      Vout = 127;
    }
    else
    {
      Vout = -128;
    }
  }
  else if (WAVETYPE == 2)
  {
    // Triangle Wave
    if (accumulatedPhase < (4294967296 / 2))
    {
      // First half of the cycle: Ramp up from -128 to 127
      Vout = ((accumulatedPhase >> 23) - 256);
    }
    else
    {
      // Second half of the cycle: Ramp down from 127 to -128
      Vout = (256 - (accumulatedPhase >> 23));
    }
  }
  else if (WAVETYPE == 3)
  {
    // Generate sine wave by taking phaseAcc/2^32 to get the instantaneous phase
    Vout = sineTable[(int)(accumulatedPhase / 4294967296.0 * TABLE_SIZE)];
  }
 
  return Vout;
}
 
void sampleISR()
{
  int32_t tonesum = 0;
  for (int i = 0; i < 12; i++)
  {
    // Serial.println(tone1[i].localcurrentStepSize);
    tone1[i].phaseAcc += tone1[i].localcurrentStepSize;
    tone2[i].phaseAcc += tone2[i].localcurrentStepSize;
    int32_t Vout1 = changeWaveform(tone1[i].phaseAcc);
    int32_t Vout2 = changeWaveform(tone2[i].phaseAcc);
    tonesum += (Vout1 + Vout2);
    // Serial.println(tonesum);
  }
 
  tonesum += reverbVout[currentReverbVoutIndex];
  reverbVout[currentReverbVoutIndex] = 0.5 * tonesum;
  currentReverbVoutIndex = (currentReverbVoutIndex + 1) % 660;
 
  // tonesum = lowpassFilter.lowpass(tonesum);
 
  tonesum = tonesum >> (8 - sysState.knob3.getRotation());
  if (tonesum > 127)
  {
    tonesum = 127;
  }
 
  if (sysState.role == 0 | sysState.role == 1)
  {
    analogWrite(OUTR_PIN, tonesum + 128);
  }
}
 
void CAN_RX_ISR(void)
{
  uint8_t RX_Message_ISR[8];
  uint32_t ID;
  CAN_RX(ID, RX_Message_ISR);
  xQueueSendFromISR(msgInQ, RX_Message_ISR, NULL);
}
 
void CAN_TX_ISR(void)
{
  xSemaphoreGiveFromISR(CAN_TX_Semaphore, NULL);
}
 
void CAN_TX_Task(void *pvParameters)
{
  uint8_t msgOut[8];
  while (1)
  {
    xQueueReceive(msgOutQ, msgOut, portMAX_DELAY);
    xSemaphoreTake(CAN_TX_Semaphore, portMAX_DELAY);
    CAN_TX(0x123, msgOut);
  }
}
 
void scanKeysTask(void *pvParameters)
{
  // const TickType_t xFrequency = 20 / portTICK_PERIOD_MS;
  // TickType_t xLastWakeTime = xTaskGetTickCount();
  std::array<bool, 12> statechange;
 
  int west = 1;
  int east = 1;
  bool run = true;
  if(run)
  {
    // vTaskDelayUntil(&xLastWakeTime, xFrequency);
    bool keyPressed = false;
 
    // xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    for (uint8_t row = 0; row < 6; ++row)
    {
      setRow(row);
      delayMicroseconds(3);
      std::bitset<4> colResults = readCols();
 
      for (int col = 0; col < 4; ++col)
      {
        sysState.inputs[(row * 4) + col] = colResults[col];
      }
      if (row == 5)
      {
        west = colResults[3];
      }
      else if (row == 6)
      {
        east = colResults[3];
      }
    }
 
    uint8_t currentKnob1State = (sysState.inputs[17] << 1) | sysState.inputs[16];
    sysState.knob1.update(currentKnob1State);
    uint8_t currentKnob2State = (sysState.inputs[15] << 1) | sysState.inputs[14];
    sysState.knob2.update(currentKnob2State);
    uint8_t currentKnob3State = (sysState.inputs[13] << 1) | sysState.inputs[12];
    sysState.knob3.update(currentKnob3State);
 
    for (int i = 0; i < 12; i++)
    {
 
      if (sysState.inputs[i] == 0)
      {
        // noteIndex = i;
        keyPressed = true;
        TX_Message[0] = 'P';
        TX_Message[1] = sysState.knob2.getRotation();
        TX_Message[2] = i;
        if (!statechange[i])
        { // if keystate change, renew stepsize
          tone1[i].localcurrentStepSize = (stepSizes[i] >> 4) << sysState.knob2.getRotation();
          key1[i] = std::to_string(sysState.knob2.getRotation()) + noteNames[i] + " ";
          //Serial.println(tone1[i].key);
          //xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
        }
        statechange[i] = true;
      }
      else
      {
        TX_Message[0] = 'R';
        TX_Message[1] = sysState.knob2.getRotation();
        TX_Message[2] = i;
        if (statechange[i])
        {
          tone1[i].localcurrentStepSize = 0;
          key1[i] = "0";
          //xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
        }
        statechange[i] = false;
      }
      
      if ((PREVWAVETYPE != WAVETYPE) && (sysState.pos == 1))
      {
        PREVWAVETYPE = WAVETYPE;
        TX_Message[6] = WAVETYPE;
        //xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
      }
 
      if(sysState.pos == 2){
        xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
      }
      // xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
      // Serial.println("finish scan");
      // if(sysState.role == 2){
      //   xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
      // }
    }
 
    // Serial.println("finish scan");
 
    // if (!keyPressed) {noteIndex = -1;}
    run = false;
    // xSemaphoreGive(sysState.mutex);
  }
}
 
void decodeTask(void *pvParameters)
{
  volatile uint32_t localStepSize;
  uint8_t localRX_Message[8];
  bool run = true;
  if(run)
  {
    run = false;
    // xQueueReceive(msgInQ, localRX_Message, portMAX_DELAY);
    if (localRX_Message[0] == 'R')
    {
      localStepSize = 0;
      tone2[localRX_Message[2]].localcurrentStepSize = localStepSize;
      key1[localRX_Message[2]+12] = "0";
    }
 
    else if (localRX_Message[0] == 'P')
    {
      localStepSize = (stepSizes[localRX_Message[2]] >> 4) << localRX_Message[1];
      tone2[localRX_Message[2]].localcurrentStepSize = localStepSize;
      key1[localRX_Message[2]+12] = std::to_string(static_cast<int>(localRX_Message[1])) + std::string(noteNames[localRX_Message[2]]) + " ";
    }
    if (sysState.pos == 1)
    {
      WAVETYPE = sysState.knob1.getRotation();
    }
    else
    {
      WAVETYPE = localRX_Message[6];
    }
    // Update RX_Message under mutex protection for display.
    // xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    // memcpy((void *)RX_Message, localRX_Message, sizeof(localRX_Message));
    // xSemaphoreGive(sysState.mutex);
  }
}
 
void displayUpdateTask(void *pvParameters)
{
  // const TickType_t xFrequency = 100 / portTICK_PERIOD_MS; // 100ms interval
  // TickType_t xLastWakeTime = xTaskGetTickCount();         // Initialize with current tick count
  uint32_t ID;
  // while (1)
  bool run = true;
  if(run)
  {
    run = false;
    // vTaskDelayUntil(&xLastWakeTime, xFrequency);
 
    // Update display logic here
    // u8g2.clearBuffer();
    // u8g2.setFont(u8g2_font_ncenB08_tr);
 
    if (sysState.pos != 2)
    {
      u8g2.clearBuffer();
      u8g2.setFont(u8g2_font_ncenB08_tr);
 
      u8g2.setCursor(2, 10);
      // xSemaphoreTake(sysState.mutex, portMAX_DELAY);
      u8g2.print(sysState.inputs.to_ulong(), HEX);
      u8g2.setCursor(50, 10);
      u8g2.print(sysState.pos);
      // if(sysState.role == 1){
      //   u8g2.print("Rec Pos: ");
      //   u8g2.print(sysState.pos);
      // }
      // else if(sysState.role == 2){
      //   u8g2.print("Send Pos: ");
      //   u8g2.print(sysState.pos);
      // }
 
      // char noteDisplay[20];
      // if (noteIndex >= 0)
      // { snprintf(noteDisplay, sizeof(noteDisplay), "Note: %s", noteNames[noteIndex]);}
      // else { snprintf(noteDisplay, sizeof(noteDisplay), "Note: No pressing");}
      // u8g2.drawStr(2, 20, noteDisplay);
      // WAVETYPE = (sysState.knob1.getRotation())%3;
      int octave = sysState.knob2.getRotation();
      int volume = sysState.knob3.getRotation();
 
      char knobRotationDisplay[18];
      snprintf(knobRotationDisplay, sizeof(knobRotationDisplay), "vol: %d", volume);
      u8g2.drawStr(2, 30, knobRotationDisplay); // Adjust Y coordinate as needed
 
      char knob2RotationDisplay[24];
      snprintf(knob2RotationDisplay, sizeof(knob2RotationDisplay), "octave: %d", octave);
      u8g2.drawStr(30, 30, knob2RotationDisplay); // Adjust Y coordinate as needed
 
      char knob3RotationDisplay[24];
      snprintf(knob3RotationDisplay, sizeof(knob2RotationDisplay), "type: %d", WAVETYPE);
      u8g2.drawStr(80, 30, knob3RotationDisplay); // Adjust Y coordinate as needed
 
      u8g2.setCursor(2, 20);
      // u8g2.print((char)RX_Message[0]);
      // u8g2.print(RX_Message[1]);
      // u8g2.print(noteNames[RX_Message[2]]);
      for (int i = 0; i < 24; i++)
      {
        if (key1[i] != "0")
        {
          u8g2.print(key1[i].c_str());
        }
      }
      // for (int i = 0; i < 12; i++)
      // {
      //   if (key2[i] != "")
      //   {
      //     u8g2.print(key1[i].c_str());
      //   }
      // }
 
      u8g2.sendBuffer();
    }
 
    if (sysState.pos == 2)
    {
      if (WAVETYPE == 0)
      {
        // Update display
        u8g2.clearBuffer();                   // clear the internal memory
        u8g2.setFont(u8g2_font_ncenB08_tr);   // choose a suitable font
        u8g2.drawStr(2, 10, "Sawtooth Wave"); // write a label for the waveform
 
        // Define variables for waveform plotting
        const int waveformLength = 100;                       // Number of points to plot
        const int waveformHeight = 15;                        // Height of the waveform display
        const float phaseIncrement = 2 * PI / waveformLength; // Phase increment for one period
 
        // Plot the sawtooth wave
        for (int i = 0; i < waveformLength / 3; i++)
        {
          float phase = phaseIncrement * i;
          int y = -(int)((float)i / (waveformLength / 3) * waveformHeight); // Scale the amplitude based on the waveform height
          int x = i;
          u8g2.drawPixel(x, 30 + y); // Plot a point on the waveform
        }
        for (int i = 0; i < waveformHeight; i++)
        {
          u8g2.drawPixel(waveformLength / 3, waveformHeight + i); // Plot a point on the waveform
        }
        for (int i = 0; i < waveformLength / 3; i++)
        {
          float phase = phaseIncrement * i;
          int y = -(int)((float)i / (waveformLength / 3) * waveformHeight); // Scale the amplitude based on the waveform height
          int x = i;
          u8g2.drawPixel(waveformLength / 3 + x, 30 + y); // Plot a point on the waveform
        }
        for (int i = 0; i < waveformLength / 3; i++)
        {
          float phase = phaseIncrement * i;
          int y = -(int)((float)i / (waveformLength / 3) * waveformHeight); // Scale the amplitude based on the waveform height
          int x = i;
          u8g2.drawPixel(waveformLength / 3 * 2 + x, 30 + y); // Plot a point on the waveform
        }
        for (int i = 0; i < waveformHeight; i++)
        {
          u8g2.drawPixel(waveformLength / 3 * 2, waveformHeight + i); // Plot a point on the waveform
        }
        char WAVETYPEDISPLAY[10];
        snprintf(WAVETYPEDISPLAY, sizeof(WAVETYPEDISPLAY), "t: %d", RX_Message[6]);
        u8g2.drawStr(80, 10, WAVETYPEDISPLAY); // Adjust Y coordinate as needed
        u8g2.sendBuffer();
      }
      else if (WAVETYPE == 3)
      {
        u8g2.clearBuffer();                 // clear the internal memory
        u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font
        u8g2.drawStr(2, 10, "Sine Wave");   // write a label for the waveform
 
        // Define variables for waveform plotting
        const int waveformLength = 100;                             // Number of points to plot
        const int waveformHeight = 8;                               // Height of the waveform display
        const float phaseIncrement = 2 * PI / (waveformLength / 2); // Phase increment for one period
 
        // Plot the sine wave
        for (int i = 0; i < waveformLength / 2; i++)
        {
          float phase = phaseIncrement * i;
          int y = -(int)(sinf(phase) * waveformHeight); // Calculate y-coordinate using sine function
          int x = i;
          u8g2.drawPixel(x, 22 + y); // Plot a point on the waveform
        }
        for (int i = 0; i < waveformLength / 2; i++)
        {
          float phase = phaseIncrement * i;
          int y = -(int)(sinf(phase) * waveformHeight); // Calculate y-coordinate using sine function
          int x = i;
          u8g2.drawPixel(waveformLength / 2 + x, 22 + y); // Plot a point on the waveform
        }
        char WAVETYPEDISPLAY[10];
        snprintf(WAVETYPEDISPLAY, sizeof(WAVETYPEDISPLAY), "t: %d", RX_Message[6]);
        u8g2.drawStr(120, 10, WAVETYPEDISPLAY); // Adjust Y coordinate as needed
        u8g2.sendBuffer();
      }
      else if (WAVETYPE == 1)
      {
        u8g2.clearBuffer();                 // clear the internal memory
        u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font
        u8g2.drawStr(2, 10, "Square Wave"); // write a label for the waveform
 
        // Define variables for waveform plotting
        const int waveformLength = 100; // Number of points to plot
        const int waveformHeight = 8;   // Height of the waveform display
 
        // Plot the square wave
        for (int i = 0; i < waveformLength / 2; i++)
        {
          int y = (i < waveformLength / 4) ? -waveformHeight : waveformHeight; // Alternate between high and low states
          int x = i;
          u8g2.drawPixel(x, 22 + y); // Plot a point on the waveform
        }
        for (int i = 0; i < waveformHeight * 2 + 1; i++)
        {
          u8g2.drawPixel(waveformLength / 4, waveformHeight * 2 + i - 2); // Plot a point on the waveform
        }
        for (int i = 0; i < waveformLength / 2; i++)
        {
          int y = (i < waveformLength / 4) ? -waveformHeight : waveformHeight; // Alternate between high and low states
          int x = i;
          u8g2.drawPixel(waveformLength / 2 + x, 22 + y); // Plot a point on the waveform
        }
        for (int i = 0; i < waveformHeight * 2 + 1; i++)
        {
          u8g2.drawPixel(waveformLength / 4 * 2, waveformHeight * 2 + i - 2); // Plot a point on the waveform
        }
        for (int i = 0; i < waveformHeight * 2 + 1; i++)
        {
          u8g2.drawPixel(waveformLength / 4 * 3, waveformHeight * 2 + i - 2); // Plot a point on the waveform
        }
        char WAVETYPEDISPLAY[10];
        snprintf(WAVETYPEDISPLAY, sizeof(WAVETYPEDISPLAY), "t: %d", RX_Message[6]);
        u8g2.drawStr(65, 10, WAVETYPEDISPLAY); // Adjust Y coordinate as needed
 
        u8g2.sendBuffer();
      }
      else if (WAVETYPE == 2)
      {
        u8g2.clearBuffer();                   // clear the internal memory
        u8g2.setFont(u8g2_font_ncenB08_tr);   // choose a suitable font
        u8g2.drawStr(2, 10, "Triangle Wave"); // write a label for the waveform
 
        // Define variables for waveform plotting
        const int waveformLength = 100; // Number of points to plot
        const int waveformHeight = 8;   // Height of the waveform display
 
        // Plot the triangle wave
        for (int i = 0; i < waveformLength / 2; i++)
        {
          int y;
          if (i < waveformLength / 4)
          {
            y = -waveformHeight + 2 * waveformHeight * i / (waveformLength / 2 / 2); // Ramp up
          }
          else
          {
            y = waveformHeight - 2 * waveformHeight * (i - waveformLength / 2 / 2) / (waveformLength / 2 / 2); // Ramp down
          }
          int x = i;
          u8g2.drawPixel(x, 22 + y); // Plot a point on the waveform
        }
        for (int i = 0; i < waveformLength / 2; i++)
        {
          int y;
          if (i < waveformLength / 4)
          {
            y = -waveformHeight + 2 * waveformHeight * i / (waveformLength / 2 / 2); // Ramp up
          }
          else
          {
            y = waveformHeight - 2 * waveformHeight * (i - waveformLength / 2 / 2) / (waveformLength / 2 / 2); // Ramp down
          }
          int x = i;
          u8g2.drawPixel(waveformLength / 2 + x, 22 + y); // Plot a point on the waveform
        }
        char WAVETYPEDISPLAY[10];
        snprintf(WAVETYPEDISPLAY, sizeof(WAVETYPEDISPLAY), "t: %d", RX_Message[6]);
        u8g2.drawStr(65, 10, WAVETYPEDISPLAY); // Adjust Y coordinate as needed
 
        u8g2.sendBuffer();
      }
    }
 
    // u8g2.sendBuffer();
 
    // Serial.println("finish display");
    // xSemaphoreGive(sysState.mutex);
 
    digitalToggle(LED_BUILTIN);
  }
}
 
void setup()
{
  // put your setup code here, to run once:
  //initSineTable();
  Serial.begin(9600);
  // Set pin directions
  pinMode(RA0_PIN, OUTPUT);
  pinMode(RA1_PIN, OUTPUT);
  pinMode(RA2_PIN, OUTPUT);
  pinMode(REN_PIN, OUTPUT);
  pinMode(OUT_PIN, OUTPUT);
  pinMode(OUTL_PIN, OUTPUT);
  pinMode(OUTR_PIN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(C0_PIN, INPUT);
  pinMode(C1_PIN, INPUT);
  pinMode(C2_PIN, INPUT);
  pinMode(C3_PIN, INPUT);
  pinMode(JOYX_PIN, INPUT);
  pinMode(JOYY_PIN, INPUT);


  TaskHandle_t decodeTaskHandle = NULL;
  xTaskCreate(decodeTask, "Decode", 64, NULL, 1, &decodeTaskHandle);

  uint32_t startTime = micros();
	for (int iter = 0; iter < 32; iter++) {
		decodeTask(NULL);
	}
	Serial.println(micros()-startTime);
	while(1);
 
  // Initialise display
  setOutMuxBit(DRST_BIT, LOW);// Assert display logic reset
  delayMicroseconds(2);
  setOutMuxBit(DRST_BIT, HIGH); // Release display logic reset
  u8g2.begin();
  setOutMuxBit(DEN_BIT, HIGH); // Enable display power supply
  // Timer configuration
  TIM_TypeDef *Instance = TIM1; // Use TIM1
  HardwareTimer *sampleTimer = new HardwareTimer(Instance);
  sampleTimer->setOverflow(22000, HERTZ_FORMAT); // Set timer overflow to 22 kHz
  sampleTimer->attachInterrupt(sampleISR);       // Attach sampleISR as the interrupt service routine
  sampleTimer->resume();                         // Start the timer
 
  CAN_Init(false);
  setCANFilter(0x123, 0x7ff);
  CAN_RegisterTX_ISR(CAN_TX_ISR);
  CAN_RegisterRX_ISR(CAN_RX_ISR);
  CAN_Start();
 
  msgInQ = xQueueCreate(36, 8);
  msgOutQ = xQueueCreate(36, 8);
  // sysState.lastRotationDirection = 0;
 
  sysState.mutex = xSemaphoreCreateMutex();
 
  CAN_TX_Semaphore = xSemaphoreCreateCounting(3, 3);
 
  // TaskHandle_t CAN_TX_Handle = NULL;
  // xTaskCreate(CAN_TX_Task, "CAN_TX", 256, NULL, 2, &CAN_TX_Handle);
  // TaskHandle_t scanKeysHandle = NULL;
  // xTaskCreate(scanKeysTask, "scanKeys", 64, NULL, 1, &scanKeysHandle);
  // Serial.println("p display");
  // TaskHandle_t displayUpdateHandle = NULL;
  // xTaskCreate(displayUpdateTask, "DisplayUpdate", 256, NULL, 1, &displayUpdateHandle); // Lower priority
  // Serial.println("p decode");
  // TaskHandle_t decodeTaskHandle = NULL;
  // xTaskCreate(decodeTask, "Decode", 64, NULL, 1, &decodeTaskHandle);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
  int west = 1;
  int east = 1;
  uint8_t msgOut[8];
  int count = 90;
  sysState.pos = 1;
  bool is_recieved = false;
  for (int j = 0; j < 5; j++)
  {
    for (uint8_t i = 0; i <= 6; i++)
    {
      setRow(i);
      delayMicroseconds(3);
      std::bitset<4> results = readCols();
      if (i == 5)
      {
        west = results[3];
      }
      else if (i == 6)
      {
        east = results[3];
      }
    }
    delay(500);
  }
 
  while (west == 0)
  {
    uint8_t RX_Message_ISR[8];
    uint32_t ID;
    CAN_RX(ID, RX_Message_ISR);
    sysState.pos = RX_Message_ISR[4];
    sysState.pos += 1;
    delay(1000);
    for (uint8_t i = 0; i <= 6; i++)
    {
      setRow(i);
      delayMicroseconds(3);
      std::bitset<4> results = readCols();
      if (i == 5)
      {
        west = results[3];
      }
      else if (i == 6)
      {
        east = results[3];
      }
      delay(100);
    }
    if (RX_Message_ISR[3] == 'P' & west == 1)
    {
      TX_Message[3] = 'P';
      TX_Message[4] = sysState.pos;
      if (east == 0)
      {
        CAN_TX(0x123, TX_Message);
      }
      else if (east == 1)
      {
        TX_Message[5] = 'E'; // rightmost
        CAN_TX(0x123, TX_Message);
      }
    }
  }
  if (west == 1 & east == 0)
  { // leftmost
    TX_Message[3] = 'P';
    TX_Message[4] = sysState.pos;
    CAN_TX(0x123, TX_Message);
    setRow(6);
    digitalWrite(OUT_PIN, 0);
    delay(1000);
    for (uint8_t i = 0; i <= 6; i++)
    {
      setRow(i);
      delayMicroseconds(3);
      std::bitset<4> results = readCols();
      if (i == 5)
      {
        west = results[3];
      }
      else if (i == 6)
      {
        east = results[3];
      }
      delay(100);
    }
    delay(100);
    // uint8_t RX_Message_ISR[8];
    // uint32_t ID;
    // CAN_RX(ID, RX_Message_ISR);
  }
  if (sysState.pos != 1)
  {
    sysState.role = 2;
  }
  else
  {
    sysState.role = 1;
  }
  while (east == 0)
  {
    uint8_t RX_Message_ISR[8];
    uint32_t ID;
    Serial.println("wait end handshaking");
    CAN_RX(ID, RX_Message_ISR);
 
    if (RX_Message_ISR[5] == 'E')
    {
      Serial.println("end handshaking");
      setRow(6);
      digitalWrite(OUT_PIN, 1);
      break;
    }
  }
  setOutMuxBit(DRST_BIT, LOW); // Assert display logic reset
  delayMicroseconds(2);
  setOutMuxBit(DRST_BIT, HIGH); // Release display logic reset
  u8g2.begin();
  setOutMuxBit(DEN_BIT, HIGH);
 
  vTaskStartScheduler();
}
 
void loop()
{
}
